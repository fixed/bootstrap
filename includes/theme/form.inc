<?php

/**
 * @file
 * Provides form theme override functions for Bootstrap themes.
 */


/**
 * Returns HTML for a button form element.
 */
function bootstrap_button(&$vars) {
  $element = $vars['element'];
  $element['#attributes']['type'] = 'submit';
  element_set_attributes($element, array('id', 'name', 'value'));

  // @Bootstrap: Add button classes.
  $element['#attributes']['class'][] = 'btn'; // Add bootstrap class.

  $element['#attributes']['class'][] = 'form-' . $element['#button_type'];
  if ( !empty($element['#attributes']['disabled']) ) {
    $element['#attributes']['class'][] = 'form-button-disabled';
  }

  // @Bootstrap: Use appropriate bootstrap button types.
  if ( isset($element['#id']) && strpos($element['#id'], 'submit') !== FALSE ) {
    $element['#attributes']['class'][] = 'btn-primary';
  }
  elseif ( isset($element['#id']) && strpos($element['#id'], 'delete') !== FALSE ) {
    $element['#attributes']['class'][] = 'btn-danger';
  }

  return '<button' . drupal_attributes($element['#attributes']) . '>' . $element['#value'] . '</button>';
}

/**
 * Returns HTML for a form.
 */
function bootstrap_form(&$variables) {
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = drupal_strip_dangerous_protocols($element['#action']);
  }
  element_set_attributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }

  // @Bootstrap: Switch forms to horizontal layout.
  if ( theme_get_setting('bootstrap_horizontal_forms') ) {
    $element['#attributes']['class'][] = 'form-horizontal';
  }

  // Anonymous DIV to satisfy XHTML compliance.
  return '<form' . drupal_attributes($element['#attributes']) . '><div>' . $element['#children'] . '</div></form>';
}

/**
 * Returns HTML for a form element.
 */
function bootstrap_form_element(&$variables) {
  // Check whether we have to introduce new divs that enable horizontal forms
  // Icon add-ons, and validation hints.
  $useBootstrapControlMarkup = theme_get_setting('bootstrap_horizontal_forms');
  
  $element = &$variables['element'];
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }

  // Add element's #type and #name as class to aid with JS/CSS selectors.
  $attributes['class'] = array('form-item');
  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }
  
  $error = FALSE;
  // @Bootstrap: Add an error class to the form wrapper.
  if ( isset($element['#parents']) && $error = form_get_error($element) ) {
    $attributes['class'][] = 'error';
  }
  // @Bootstrap: Add Control Group if necessary
  if($useBootstrapControlMarkup) {
    $attributes['class'][] = 'control-group';
  }
  
  $output = '<div' . drupal_attributes($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      if($useBootstrapControlMarkup) {
        $output .= '<div class="controls">';
      }
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      if($useBootstrapControlMarkup) {
        $output .= '<div class="controls">';
      }
      // @Bootstrap: Bootstrap markup requires the input element to be inside the label element.
      $variables['#children'] = ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      if($useBootstrapControlMarkup) {
        $output .= '<div class="controls">';
      }
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }
  
  if($useBootstrapControlMarkup) {
    if($error) {
      $output .= '<span class="help-inline">'.$error.'</span>';
    }
    $output .= '</div>';
  }

  if ( !empty($element['#description']) ) {
    $output .= '<p class="description">' . $element['#description'] . "</p>\n";
  }

  
  $output .= "</div>\n";

  return $output;
}

/**
 * Returns HTML for a form element label and required marker.
 */
function bootstrap_form_element_label(&$variables) {
  $element = $variables['element'];
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // If title and required marker are both empty, output no label.
  if ((!isset($element['#title']) || $element['#title'] === '') && empty($element['#required'])) {
    return '';
  }

  // If the element is required, a required marker is appended to the label.
  $required = !empty($element['#required']) ? theme('form_required_marker', array('element' => $element)) : '';

  $title = filter_xss_admin($element['#title']);

  $attributes = array();
  // Style the label as class option to display inline with the element.
  if ($element['#title_display'] == 'after') {
    $attributes['class'][] = 'option';
    // @Bootstrap: Add type class.
    $attributes['class'][] = $element['#type'];
  }
  // Show label only to screen readers to avoid disruption in visual flows.
  elseif ($element['#title_display'] == 'invisible') {
    $attributes['class'][] = 'element-invisible';
  }

  if (!empty($element['#id'])) {
    $attributes['for'] = $element['#id'];
  }

  // @Bootstrap: Add Bootstrap control-label class.
  $attributes['class'][] = 'control-label';

  // @Bootstrap: Insert radio and checkboxes inside label elements.
  $output = '';
  if ( isset($variables['#children']) ) {
    $output .= $variables['#children'];
  }

  // @Bootstrap: Append label
  $output .= $t('!title !required', array('!title' => $title, '!required' => $required));

  // The leading whitespace helps visually separate fields from inline labels.
  return ' <label' . drupal_attributes($attributes) . '>' . $output . "</label>\n";
}

/**
 * Returns HTML for a set of filter tips.
 */
function bootstrap_filter_tips($variables) {
  $tips = $variables['tips'];
  $long = $variables['long'];
  $output = '';

  $multiple = count($tips) > 1;
  if ($multiple) {
    $output = '<h2>' . t('Text Formats') . '</h2>';
  }

  if (count($tips)) {
    // @Bootstrap: Use "well" style for input filter information.
    $output .= '<div class="well">';
    if ($multiple) {
      $output .= '<div class="compose-tips">';
    }
    foreach ($tips as $name => $tiplist) {
      if ($multiple) {
        $output .= '<div class="filter-type filter-' . drupal_html_class($name) . '">';
        $output .= '<h3>' . $name . '</h3>';
      }

      if (count($tiplist) > 0) {
        $output .= '<ul class="tips">';
        foreach ($tiplist as $tip) {
          $output .= '<li' . ($long ? ' id="filter-' . str_replace("/", "-", $tip['id']) . '">' : '>') . $tip['tip'] . '</li>';
        }
        $output .= '</ul>';
      }

      if ($multiple) {
        $output .= '</div>';
      }
    }
    if ($multiple) {
      $output .= '</div>';
    }
    $output .= '</div>';
  }

  return $output;
}